//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL_EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CMartinezEjercicioAutosEntities : DbContext
    {
        public CMartinezEjercicioAutosEntities()
            : base("name=CMartinezEjercicioAutosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Autos> Autos { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<Modelo> Modelo { get; set; }
        public virtual DbSet<Version> Version { get; set; }
    
        public virtual ObjectResult<GetAllAutos_Result> GetAllAutos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAutos_Result>("GetAllAutos");
        }
    
        public virtual int AutoInsert(Nullable<int> año, string color, Nullable<double> kilometraje, Nullable<int> numeroPuertas, string transmisión, string combustible, Nullable<decimal> precio, Nullable<int> idMarca, Nullable<int> idModelo, Nullable<int> idVersion)
        {
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var kilometrajeParameter = kilometraje.HasValue ?
                new ObjectParameter("Kilometraje", kilometraje) :
                new ObjectParameter("Kilometraje", typeof(double));
    
            var numeroPuertasParameter = numeroPuertas.HasValue ?
                new ObjectParameter("NumeroPuertas", numeroPuertas) :
                new ObjectParameter("NumeroPuertas", typeof(int));
    
            var transmisiónParameter = transmisión != null ?
                new ObjectParameter("Transmisión", transmisión) :
                new ObjectParameter("Transmisión", typeof(string));
    
            var combustibleParameter = combustible != null ?
                new ObjectParameter("Combustible", combustible) :
                new ObjectParameter("Combustible", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idModeloParameter = idModelo.HasValue ?
                new ObjectParameter("IdModelo", idModelo) :
                new ObjectParameter("IdModelo", typeof(int));
    
            var idVersionParameter = idVersion.HasValue ?
                new ObjectParameter("IdVersion", idVersion) :
                new ObjectParameter("IdVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoInsert", añoParameter, colorParameter, kilometrajeParameter, numeroPuertasParameter, transmisiónParameter, combustibleParameter, precioParameter, idMarcaParameter, idModeloParameter, idVersionParameter);
        }
    }
}
